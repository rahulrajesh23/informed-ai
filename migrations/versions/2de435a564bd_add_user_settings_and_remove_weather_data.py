"""add_user_settings_and_remove_weather_data

Revision ID: 2de435a564bd
Revises: 6373a47b4366
Create Date: 2024-12-25 21:06:17.044361+00:00

"""

from typing import Sequence

import sqlalchemy as sa
import sqlmodel
import sqlmodel.sql.sqltypes
from alembic import op
from sqlalchemy.dialects import postgresql
from informed.db_models.shared_types import JSONBFromPydantic
from informed.db_models.users import UserConfigurations

# revision identifiers, used by Alembic.
revision: str = "2de435a564bd"
down_revision: str | None = "6373a47b4366"
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    # Set default value for any NULL languages
    op.execute("UPDATE message SET language = 'ENGLISH' WHERE language IS NULL")

    # Convert message.language to use the existing language enum type
    op.execute(
        """
        ALTER TABLE message
        ALTER COLUMN language TYPE language
        USING language::language
    """
    )

    # Make it not nullable
    op.execute("ALTER TABLE message ALTER COLUMN language SET NOT NULL")

    # Altering requested_response_type to use enum
    op.execute(
        "CREATE TYPE messageresponsetype AS ENUM ('TEXT', 'TEXT_MESSAGE', 'AUDIO')"
    )

    # Update existing values to ensure they match our enum values
    op.execute(
        "UPDATE message SET requested_response_type = 'TEXT' WHERE requested_response_type = 'text'"
    )
    op.execute(
        "UPDATE message SET requested_response_type = 'TEXT_MESSAGE' WHERE requested_response_type = 'text_message'"
    )
    op.execute(
        "UPDATE message SET requested_response_type = 'AUDIO' WHERE requested_response_type = 'audio'"
    )

    # Convert the column to use the enum, keeping null values
    op.execute(
        """
        ALTER TABLE message
        ALTER COLUMN requested_response_type TYPE messageresponsetype
        USING CASE
            WHEN requested_response_type IS NULL THEN NULL
            ELSE requested_response_type::messageresponsetype
        END
    """
    )

    op.create_table(
        "settings",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("user_id", sa.Uuid(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.Column(
            "configurations", JSONBFromPydantic(UserConfigurations), nullable=True
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.user_id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.drop_index("ix_weather_data_zip_code", table_name="weather_data")
    op.drop_table("weather_data")

    # ### end Alembic commands ###


def downgrade() -> None:
    # Make it nullable again
    op.execute("ALTER TABLE message ALTER COLUMN language DROP NOT NULL")

    # Convert back to varchar
    op.execute(
        "ALTER TABLE message ALTER COLUMN language TYPE VARCHAR USING language::VARCHAR"
    )

    # Drop the enum type
    op.execute("DROP TYPE IF EXISTS messageresponsetype")

    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "weather_data",
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column(
            "zip_code", sa.VARCHAR(length=10), autoincrement=False, nullable=False
        ),
        sa.Column("date", postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
        sa.Column(
            "timestamp", postgresql.TIMESTAMP(), autoincrement=False, nullable=False
        ),
        sa.Column("weather_conditions", sa.TEXT(), autoincrement=False, nullable=False),
        sa.PrimaryKeyConstraint("id", name="weather_data_pkey"),
    )
    op.create_index(
        "ix_weather_data_zip_code", "weather_data", ["zip_code"], unique=False
    )
    op.drop_table("user_settings")
    # ### end Alembic commands ###

    # Drop the enum types last
    op.execute("DROP TYPE IF EXISTS messageresponsetype")
    op.execute("DROP TYPE IF EXISTS language")
